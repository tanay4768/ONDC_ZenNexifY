# -*- coding: utf-8 -*-
"""using_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_G6SSwmw9I6C-AONRoZp-WldqDu9yaQ

Single test case image
"""

import requests

def perform_ocr(api_key, image_path=None, image_url=None, language='eng'):
    """
    Perform OCR using the OCR.Space API.

    Parameters:
        api_key (str): Your API key for OCR.Space.
        image_path (str): The path to the local image file (optional).
        image_url (str): URL of the image (optional).
        language (str): Language code (default: 'eng').

    Returns:
        dict: The JSON response from the API.
    """
    api_url = 'https://api.ocr.space/parse/image'
    headers = {
        'apikey': api_key,
    }

    data = {'language': language}
    files = None

    # Check if using a local image or URL
    if image_path:
        files = {'file': open(image_path, 'rb')}
    elif image_url:
        data['url'] = image_url
    else:
        raise ValueError("Either 'image_path' or 'image_url' must be provided.")

    # Make the POST request
    try:
        response = requests.post(api_url, headers=headers, data=data, files=files)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error: {response.status_code}, {response.text}")
    finally:
        # Ensure the file is properly closed
        if files:
            files['file'].close()


# Example Usage
if __name__ == "__main__":
    API_KEY = "K87187035688957"  # Replace with your OCR.Space API key

    # Example 1: Using a local image file
    try:
        result = perform_ocr(api_key=API_KEY, image_path='/content/test_img.jpg')
        print("OCR Result (from local image):", result['ParsedResults'][0]['ParsedText'])
    except Exception as e:
        print("Error:", e)

"""test case for dataset

"""

import os
import zipfile
import json
import requests

# Step 1: Define paths
zip_file_path = "/content/archive (4).zip"  # Path to the uploaded ZIP file
extracted_folder = "/content/extracted_images"  # Folder where images will be extracted
output_file = "/content/ocr_results.json"  # File to save OCR results

# Step 2: Extract the ZIP file
os.makedirs(extracted_folder, exist_ok=True)  # Ensure the folder exists
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extracted_folder)

# Print the names of extracted files to verify
extracted_files = os.listdir(extracted_folder)
print(f"Files extracted to: {extracted_folder}")
print(f"Extracted files: {extracted_files}")

# Step 3: Define OCR function
def perform_ocr_on_images(api_key, images_folder, output_file):
    api_url = 'https://api.ocr.space/parse/image'
    headers = {'apikey': api_key}
    results = {}

    # Walk through the folder and its subfolders to find image files
    for root, _, files in os.walk(images_folder):
        for image_name in files:
            image_path = os.path.join(root, image_name)
            if not image_name.lower().endswith(('.png', '.jpg', '.jpeg')):  # Skip non-image files
                print(f"Skipping non-image file: {image_name}")
                continue

            try:
                with open(image_path, 'rb') as img_file:
                    response = requests.post(
                        api_url,
                        headers=headers,
                        files={'file': img_file},
                        data={'language': 'eng'}
                    )

                # Log the response status and content for debugging
                print(f"Response status code for {image_name}: {response.status_code}")
                print(f"Response content for {image_name}: {response.text}")

                response.raise_for_status()  # Raise an exception for a non-2xx status code
                result = response.json()
                extracted_text = result.get('ParsedResults', [{}])[0].get('ParsedText', 'No text found.')
                results[image_name] = extracted_text.strip()
            except Exception as e:
                print(f"Error processing {image_name}: {e}")
                results[image_name] = f"Error: {e}"

    # Step 4: Save results to a text file
    with open(output_file, 'w') as json_file:
        json.dump(results, json_file, indent=4)
# Step 5: Run OCR
OCR_API_KEY = "K87580064288957"  # Replace with your valid OCR.Space API key
perform_ocr_on_images(OCR_API_KEY, extracted_folder, output_file)

print(f"OCR results saved to: {output_file}")

import os
import zipfile
import json
import requests

# Class to represent OCR results for each image
class ImageOCRResult:
    def __init__(self, image_name, extracted_text, error=None):
        self.image_name = image_name
        self.extracted_text = extracted_text
        self.error = error

    # Convert ImageOCRResult instance to a dictionary (JSON)
    def to_json(self):
        return {
            'image_name': self.image_name,
            'extracted_text': self.extracted_text,
            'error': self.error
        }

    # Create an ImageOCRResult instance from a dictionary (JSON)
    @classmethod
    def from_json(cls, json_data):
        return cls(
            image_name=json_data['image_name'],
            extracted_text=json_data['extracted_text'],
            error=json_data.get('error')
        )

# Class to represent the complete OCR process for all images
class OCRProcessor:
    def __init__(self, api_key, zip_file_path, extracted_folder, output_file):
        self.api_key = api_key
        self.zip_file_path = zip_file_path
        self.extracted_folder = extracted_folder
        self.output_file = output_file

    # Step 1: Extract files from ZIP
    def extract_files(self):
        os.makedirs(self.extracted_folder, exist_ok=True)  # Ensure the folder exists
        with zipfile.ZipFile(self.zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(self.extracted_folder)

        # Return the list of extracted files for verification
        extracted_files = os.listdir(self.extracted_folder)
        return extracted_files

    # Step 2: Perform OCR on images
    def perform_ocr_on_images(self):
        api_url = 'https://api.ocr.space/parse/image'
        headers = {'apikey': self.api_key}
        ocr_results = []

        # Walk through the folder and its subfolders to find image files
        for root, _, files in os.walk(self.extracted_folder):
            for image_name in files:
                image_path = os.path.join(root, image_name)
                if not image_name.lower().endswith(('.png', '.jpg', '.jpeg')):  # Skip non-image files
                    print(f"Skipping non-image file: {image_name}")
                    continue

                try:
                    with open(image_path, 'rb') as img_file:
                        response = requests.post(
                            api_url,
                            headers=headers,
                            files={'file': img_file},
                            data={'language': 'eng'}
                        )

                    # Log the response status and content for debugging
                    print(f"Response status code for {image_name}: {response.status_code}")
                    print(f"Response content for {image_name}: {response.text}")

                    response.raise_for_status()  # Raise an exception for a non-2xx status code
                    result = response.json()
                    extracted_text = result.get('ParsedResults', [{}])[0].get('ParsedText', 'No text found.')
                    ocr_results.append(ImageOCRResult(image_name, extracted_text.strip()))

                except Exception as e:
                    print(f"Error processing {image_name}: {e}")
                    ocr_results.append(ImageOCRResult(image_name, '', str(e)))

        # Step 3: Save results to a JSON file
        with open(self.output_file, 'w') as json_file:
            json.dump([result.to_json() for result in ocr_results], json_file, indent=4)

# Step 4: Execute OCR processing
OCR_API_KEY = "K87580064288957"  # Replace with your valid OCR.Space API key
ZIP_FILE_PATH = "/content/archive (4).zip"  # Path to the uploaded ZIP file
EXTRACTED_FOLDER = "/content/extracted_images"  # Folder where images will be extracted
OUTPUT_FILE = "/content/ocr_results.json"  # File to save OCR results

ocr_processor = OCRProcessor(OCR_API_KEY, ZIP_FILE_PATH, EXTRACTED_FOLDER, OUTPUT_FILE)

# Extract files
extracted_files = ocr_processor.extract_files()
print(f"Files extracted to: {EXTRACTED_FOLDER}")
print(f"Extracted files: {extracted_files}")

# Perform OCR on images and save the results
ocr_processor.perform_ocr_on_images()
print(f"OCR results saved to: {OUTPUT_FILE}")

"""Categorized Merged


"""

import os
import zipfile
import json
import requests
import re

# Class to represent OCR results in a structured format
class OCRResult:
    def __init__(self, product_id, title, price, description, category, extracted_text=None, error=None, image_name=None, rating=None):
        self.product_id = product_id
        self.title = title
        self.price = price
        self.description = description
        self.category = category
        self.extracted_text = extracted_text
        self.error = error
        self.image_name = image_name
        self.rating = rating

    def to_json(self):
        return {
            'product_id': self.product_id,
            'title': self.title,
            'price': self.price,
            'description': self.description,
            'category': self.category,
            'extracted_text': self.extracted_text,
            'error': self.error,
            'image_name': self.image_name,
            'rating': self.rating
        }

    @classmethod
    def from_json(cls, json_data):
        return cls(
            product_id=json_data.get('product_id'),
            title=json_data.get('title'),
            price=json_data.get('price'),
            description=json_data.get('description'),
            category=json_data.get('category'),
            extracted_text=json_data.get('extracted_text'),
            error=json_data.get('error'),
            image_name=json_data.get('image_name'),
            rating=json_data.get('rating')
        )

# OCR Processor Class
class OCRProcessor:
    def __init__(self, api_key, output_file):
        self.api_key = api_key
        self.output_file = output_file

    def perform_ocr(self, image_path=None, image_url=None, language='eng'):
        api_url = 'https://api.ocr.space/parse/image'
        headers = {'apikey': self.api_key}
        data = {'language': language}
        files = None

        if image_path:
            files = {'file': open(image_path, 'rb')}
        elif image_url:
            data['url'] = image_url
        else:
            raise ValueError("Either 'image_path' or 'image_url' must be provided.")

        try:
            response = requests.post(api_url, headers=headers, data=data, files=files)
            if response.status_code == 200:
                return response.json()
            else:
                raise Exception(f"Error: {response.status_code}, {response.text}")
        finally:
            if files:
                files['file'].close()

    def extract_fields_from_text(self, extracted_text):
        cleaned_text = extracted_text.replace("\r", " ").replace("\n", " ")
        title = "Unknown Title"
        price = 0.0
        category = "Unknown"
        description = cleaned_text.strip()

        price_match = re.search(r'([\$\u20b9\u00a3\u20ac]\s?[0-9,]+(?:\.\d{2})?)', cleaned_text)
        if price_match:
            price_text = re.sub(r'[^\d.]', '', price_match.group(0))
            try:
                price = float(price_text)
            except ValueError:
                price = 0.0

        title_match = re.search(r'(Bournville|Cadbury|Chocolate|Product)\s*[A-Za-z0-9\s]+', cleaned_text, re.IGNORECASE)
        if title_match:
            title = title_match.group(0)

        category_match = re.match(r"^([A-Za-z\s]+)", cleaned_text)
        if category_match:
            category = category_match.group(1)

        return title, price, category, description

    def save_result(self, result):
        try:
            if os.path.exists(self.output_file):
                with open(self.output_file, 'r') as file:
                    existing_data = json.load(file)
            else:
                existing_data = []

            existing_data.append(result.to_json())

            with open(self.output_file, 'w') as file:
                json.dump(existing_data, file, indent=4)

            print("Result saved successfully.")
        except Exception as e:
            print(f"Error saving result: {e}")

    def process_single_image(self, image_path):
        try:
            result = self.perform_ocr(image_path=image_path)
            extracted_text = result.get('ParsedResults', [{}])[0].get('ParsedText', 'No text found.')
            title, price, category, description = self.extract_fields_from_text(extracted_text)
            ocr_result = OCRResult(product_id=image_path, title=title, price=price, description=description, category=category, extracted_text=extracted_text)
            self.save_result(ocr_result)
        except Exception as e:
            print(f"Error processing {image_path}: {e}")

    def process_zip_file(self, zip_file_path, extracted_folder):
        os.makedirs(extracted_folder, exist_ok=True)
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extracted_folder)

        for root, _, files in os.walk(extracted_folder):
            for image_name in files:
                image_path = os.path.join(root, image_name)
                if image_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                    try:
                        self.process_single_image(image_path)
                    except Exception as e:
                        print(f"Error processing {image_name}: {e}")

# Example Usage
if __name__ == "__main__":
    API_KEY = "K87580064288957"
    OUTPUT_FILE = "ocr_results.json"

    ocr_processor = OCRProcessor(api_key=API_KEY, output_file=OUTPUT_FILE)

    # Process single image
    ocr_processor.process_single_image("/content/test_img.jpg")

    # Process ZIP file
    ocr_processor.process_zip_file("/content/archive (4).zip", "/content/extracted_images")

import os
import zipfile
import json
import requests
import re

# Class to represent OCR results in a structured format
class OCRResult:
    def __init__(self, product_id, title, price, description, category, extracted_text=None, error=None, image_name=None, rating=None):
        self.product_id = product_id
        self.title = title
        self.price = price
        self.description = description
        self.category = category
        self.extracted_text = extracted_text
        self.error = error
        self.image_name = image_name
        self.rating = rating

    def to_json(self):
        return {
            'product_id': self.product_id,
            'title': self.title,
            'price': self.price,
            'description': self.description,
            'category': self.category,
            'extracted_text': self.extracted_text,
            'error': self.error,
            'image_name': self.image_name,
            'rating': self.rating
        }

    @classmethod
    def from_json(cls, json_data):
        return cls(
            product_id=json_data.get('product_id'),
            title=json_data.get('title'),
            price=json_data.get('price'),
            description=json_data.get('description'),
            category=json_data.get('category'),
            extracted_text=json_data.get('extracted_text'),
            error=json_data.get('error'),
            image_name=json_data.get('image_name'),
            rating=json_data.get('rating')
        )

# OCR Processor Class
class OCRProcessor:
    def __init__(self, api_key, output_file):
        self.api_key = api_key
        self.output_file = output_file

    def perform_ocr(self, image_path=None, image_url=None, language='eng'):
        api_url = 'https://api.ocr.space/parse/image'
        headers = {'apikey': self.api_key}
        data = {'language': language}
        files = None

        if image_path:
            files = {'file': open(image_path, 'rb')}
        elif image_url:
            data['url'] = image_url
        else:
            raise ValueError("Either 'image_path' or 'image_url' must be provided.")

        try:
            response = requests.post(api_url, headers=headers, data=data, files=files)
            if response.status_code == 200:
                return response.json()
            else:
                raise Exception(f"Error: {response.status_code}, {response.text}")
        finally:
            if files:
                files['file'].close()

    def extract_fields_from_text(self, extracted_text):
        cleaned_text = extracted_text.replace("\r", " ").replace("\n", " ")
        title = "Unknown Title"
        price = 0.0
        category = "Unknown"
        description = cleaned_text.strip()

        price_match = re.search(r'([\$\u20b9\u00a3\u20ac]\s?[0-9,]+(?:\.\d{2})?)', cleaned_text)
        if price_match:
            price_text = re.sub(r'[^\d.]', '', price_match.group(0))
            try:
                price = float(price_text)
            except ValueError:
                price = 0.0

        title_match = re.search(r'(Bournville|Cadbury|Chocolate|Product)\s*[A-Za-z0-9\s]+', cleaned_text, re.IGNORECASE)
        if title_match:
            title = title_match.group(0)

        category_match = re.match(r"^([A-Za-z\s]+)", cleaned_text)
        if category_match:
            category = category_match.group(1)

        return title, price, category, description

    def save_result(self, result):
        try:
            if os.path.exists(self.output_file):
                with open(self.output_file, 'r') as file:
                    existing_data = json.load(file)
            else:
                existing_data = []

            existing_data.append(result.to_json())

            with open(self.output_file, 'w') as file:
                json.dump(existing_data, file, indent=4)

            print("Result saved successfully.")
        except Exception as e:
            print(f"Error saving result: {e}")

    def process_single_image(self, image_path):
        try:
            result = self.perform_ocr(image_path=image_path)
            extracted_text = result.get('ParsedResults', [{}])[0].get('ParsedText', 'No text found.')
            title, price, category, description = self.extract_fields_from_text(extracted_text)
            ocr_result = OCRResult(product_id=image_path, title=title, price=price, description=description, category=category, extracted_text=extracted_text)
            self.save_result(ocr_result)
        except Exception as e:
            print(f"Error processing {image_path}: {e}")

    def process_zip_file(self, zip_file_path, extracted_folder):
        os.makedirs(extracted_folder, exist_ok=True)
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extracted_folder)

        for root, _, files in os.walk(extracted_folder):
            for image_name in files:
                image_path = os.path.join(root, image_name)
                if image_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                    try:
                        self.process_single_image(image_path)
                    except Exception as e:
                        print(f"Error processing {image_name}: {e}")

# Example Usage
if __name__ == "__main__":
    API_KEY = "K87580064288957"
    OUTPUT_FILE = "ocr_results.json"

    ocr_processor = OCRProcessor(api_key=API_KEY, output_file=OUTPUT_FILE)

    # Process single image
    ocr_processor.process_single_image("/content/test_img.jpg")

    # Process ZIP file
    ocr_processor.process_zip_file("/content/archive (4).zip", "/content/extracted_images")

